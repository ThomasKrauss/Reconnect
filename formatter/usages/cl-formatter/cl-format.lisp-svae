("simple tests"

("on nil" (string= (cl-format nil) ""))
("on empty string" (string= (cl-format "") ""))

("one-liner function"
(string= (cl-format "(+ 1 2 (* 3 4))")
         "(+ 1 2 (* 3 4))"))

("'regular' two-liner function"
(string= (cl-format "(+ 1 2
(* 3 4))")
         "(+ 1 2
   (* 3 4))")))


("spaces and newlines in uncommon places"
("'twisted' two-liner function"
(string= (cl-format "
(+ 1 2 (* 3 4))")
         "(+ 1 2 (* 3 4))"))

("another 'twisted' two-liner function"
(string= (cl-format "(
+ 1 2 (* 3 4))")
         "(+ 1 2 (* 3 4))"))
   
("some additional spaces in front of the form. There should be no impact."
(string= (cl-format "   (+ 1 2
(* 3 4))")
         "(+ 1 2
   (* 3 4))"))

("some additional spaces between the first parenthesis and the action-name. No impact expected."
(string= (cl-format "(     + 1 2
(* 3 4))")
         "(+ 1 2
   (* 3 4))"))

("some additional spaces between arguments. No impact expected."
(string= (cl-format "(+    1     2
(* 3 4))")
         "(+ 1 2
   (* 3 4))"))
 
("some whitespace before the newline. No impact expected."
(string= (cl-format "(+ 1 2    
(* 3 4))")
         "(+ 1 2
   (* 3 4))"))

("some additional spaces in front of the newline. No impact expected."
(string= (cl-format "(+ 1 2
                  (* 3 4))")
         "(+ 1 2
   (* 3 4))"))

("some additional spaces between two closing parentheses. No impact expected."
(string= (cl-format "(+ 1 2
(* 3 4)          )")
         "(+ 1 2
   (* 3 4))"))

("some additional spaces at the end of the form. No impact expected."
(string= (cl-format "(+ 1 2
(* 3 4))                 ")
         "(+ 1 2
   (* 3 4))")))

("test recursive indentation"
("(Is it that complete?)"
(string= (cl-format "(+ 1 2 (* 3
4)
(/ 50 (- 6
7 (* 80
90))
10 11))")
"(+ 1 2 (* 3
          4)
   (/ 50 (- 6
            7 (* 80
                 90))
      10 11))")))

("Exceptions"
("defun (special body indentation assumed)"
(string= (cl-format "(defun test (x)
(+ x 2))")
         "(defun test (x)
    (+ x 2))"))

("multiple-value-bind"
(string= (cl-format "(multiple-value-bind
(first second)
(if (= 0 x)
(values 1 2)
(values 3 4))
(list first
(* 2 second)))")
         "(multiple-value-bind
        (first second)
        (if (= 0 x)
            (values 1 2)
            (values 3 4))
    (list first
          (* 2 second)))"))

("validate the indent-size argument with multiple-value-bind"
(string= (cl-format "(multiple-value-bind
(first second)
(if (= 0 x)
(values 1 2)
(values 3 4))
(list first
(* 2 second)))" 2)
         "(multiple-value-bind
    (first second)
    (if (= 0 x)
        (values 1 2)
        (values 3 4))
  (list first
        (* 2 second)))")))

("Strings"
("on a newline, single line, no parentheses"
(string= (cl-format "(defun test (x)
\"This is a small documentation string.\"
(+ x 2))")
         "(defun test (x)
    \"This is a small documentation string.\"
    (+ x 2))"))

("on a newline, single line, parentheses"
(string= (cl-format "(defun test (x)
\"(test 4) gives 6.\"
(+ x 2))")
         "(defun test (x)
    \"(test 4) gives 6.\"
    (+ x 2))"))

("on a newline, single line, an escaped double-quote"
(string= (cl-format "(defun test (x)
\"This is a \\\"small\\\" documentation string.\"
(+ x 2))")
         "(defun test (x)
    \"This is a \\\"small\\\" documentation string.\"
    (+ x 2))"))

("as an argument, single line"
(string= (cl-format "(concatenate 'string \"test\"
\"!!!\")")
         "(concatenate 'string \"test\"
             \"!!!\")"))

("multiple lines, no parentheses"
(string= (cl-format "(defun test (x)
\"This is a bigger documentation string.
I want to say much more things here!\"
(+ x 2))")
         "(defun test (x)
    \"This is a bigger documentation string.
I want to say much more things here!\"
    (+ x 2))"))

("multiple lines, parentheses"
(string= (cl-format "(defun test (x)
\"This is a bigger documentation string.
I want to say much more things here!
Like (test 4) gives 6.\"
(+ x 2))")
         "(defun test (x)
    \"This is a bigger documentation string.
I want to say much more things here!
Like (test 4) gives 6.\"
    (+ x 2))")))

("Single line comment"

("between lines of code, no parentheses"
(string= (cl-format "(defun test (x)
; This is a small comment
(+ x 2))")
         "(defun test (x)
    ; This is a small comment
    (+ x 2))"))

("between lines of code, parentheses"
(string= (cl-format "(defun test (x)
; (test 4) gives 6.
(+ x 2))")
         "(defun test (x)
    ; (test 4) gives 6.
    (+ x 2))"))

("at the end of a line, no parentheses"
(string= (cl-format "(defun test (x) ; This is a end-of-line comment
(+ x 2))")
         "(defun test (x) ; This is a end-of-line comment
    (+ x 2))"))

("at the end of a line, parentheses"
(string= (cl-format "(defun test (x) ; (test 4) gives 6.
(+ x 2))")
         "(defun test (x) ; (test 4) gives 6.
    (+ x 2))")))