("Get all the action body, ignoring documentation string (if any) and all declarations"
 ("Simple definitions"
  (equal (get-action-body '(defun test (x) x))
         '(x))
  (equal (get-action-body '(defun test (x y) (+ x y)))
         '((+ x y)))
  (equal (get-action-body '(defmacro test (x y) `(+ x y)))
         '(`(+ x y)))
  (equal (get-action-body '(defun test (x y) (+ x y) (* x y)))
         '((+ x y) (* x y)))
  (equal (get-action-body '(defmacro test (x y) `(+ x y) `(* x y)))
         '(`(+ x y) `(* x y))))
 ("Ignoring the documentation string"
  (equal (get-action-body '(defun test (x y) "doc" (+ x y)))
         '((+ x y)))
  (equal (get-action-body '(defmacro test (x y) "doc" `(+ x y)))
         '(`(+ x y)))
  (equal (get-action-body '(defun test (x y) "doc" (+ x y) (* x y)))
         '((+ x y) (* x y)))
  (equal (get-action-body '(defmacro test (x y) "doc" `(+ x y) `(* x y)))
         '(`(+ x y) `(* x y))))
 ("Ignoring declarations"
  (equal (get-action-body '(defun test (x y) (declare (number x)) (+ x y)))
         '((+ x y)))
  (equal (get-action-body '(defmacro test (x y) (declare (number x)) `(+ x y)))
         '(`(+ x y)))
  (equal (get-action-body '(defun test (x y) (declare (number x)) (+ x y) (* x y)))
         '((+ x y) (* x y)))
  (equal (get-action-body '(defmacro test (x y) (declare (number x)) `(+ x y) `(* x y)))
         '(`(+ x y) `(* x y)))
  (equal (get-action-body '(defun test (x y) (declare (number x)) (declare (ignorable y)) (+ x y)))
         '((+ x y)))
  (equal (get-action-body '(defmacro test (x y) (declare (number x)) (declare (ignorable y)) `(+ x y)))
         '(`(+ x y)))
  (equal (get-action-body '(defun test (x y) (declare (number x)) (declare (ignorable y)) (+ x y) (* x y)))
         '((+ x y) (* x y)))
  (equal (get-action-body '(defmacro test (x y) (declare (number x)) (declare (ignorable y)) `(+ x y) `(* x y)))
         '(`(+ x y) `(* x y))))
 ("Ignoring documentation string and declarations"
  (equal (get-action-body '(defun test (x y) "doc" (declare (number x)) (+ x y)))
         '((+ x y)))
  (equal (get-action-body '(defmacro test (x y) "doc" (declare (number x)) `(+ x y)))
         '(`(+ x y)))
  (equal (get-action-body '(defun test (x y) "doc" (declare (number x)) (+ x y) (* x y)))
         '((+ x y) (* x y)))
  (equal (get-action-body '(defmacro test (x y) "doc" (declare (number x)) `(+ x y) `(* x y)))
         '(`(+ x y) `(* x y)))
  (equal (get-action-body '(defun test (x y) "doc" (declare (number x)) (declare (ignorable y)) (+ x y)))
         '((+ x y)))
  (equal (get-action-body '(defmacro test (x y ) "doc" (declare (number x)) (declare (ignorable y)) `(+ x y)))
         '(`(+ x y)))
  (equal (get-action-body '(defun test (x y) "doc" (declare (number x)) (declare (ignorable y)) (+ x y) (* x y)))
         '((+ x y) (* x y)))
  (equal (get-action-body '(defmacro test (x y) "doc" (declare (number x)) (declare (ignorable y)) `(+ x y) `(* x y)))
         '(`(+ x y) `(* x y))))
 ("Lambda forms"
  (equal (get-action-body '(lambda (x) (+ x 2)))
         '((+ x 2)))
  (equal (get-action-body '(lambda (x) "test" (+ x 2)))
         '((+ x 2)))
  (equal (get-action-body '(lambda (x) (declare (ignorable x)) (+ x 2)))
         '((+ x 2)))
  (equal (get-action-body '(lambda (x) "test" (declare (ignorable x)) (+ x 2)))
         '((+ x 2))))
 ("Let"
  (equal (get-action-body '(let ((x (+ 1 2)) (y (* 3 4))) (+ x y)))
         '((+ x y)))
  (equal (get-action-body '(let ((x (+ 1 2)) (y (* 3 4))) (declare (ignorable x)) (+ x y)))
         '((+ x y))))
 ("Let*"
  (equal (get-action-body '(let* ((x (+ 1 2)) (y (* 3 4))) (+ x y)))
         '((+ x y)))
  (equal (get-action-body '(let* ((x (+ 1 2)) (y (* 3 4))) (declare (ignorable x)) (+ x y)))
         '((+ x y)))))