("Alet"
 ("Example: alet's closure is at first about incrementing."
  (= 10 (let ((closure (alet (x)
                             (setf x 0)
                             (lambda (n)
                               (setf this (lambda (n)
                                            (decf x n)))
                               (incf x n)))))
          (funcall closure 10))))
 ("But just once! Afterwards, when called, it will always decrement."
  (= 0 (let ((closure (alet (x)
                            (setf x 0)
                            (lambda (n)
                              (setf this (lambda (n)
                                           (decf x n)))
                              (incf x n)))))
         (funcall closure 10)
         (funcall closure 10))))
 ("*Always* decrementing!"
  (= -20 (let ((closure (alet (x)
                              (setf x 0)
                              (lambda (n)
                                (setf this (lambda (n)
                                             (decf x n)))
                                (incf x n)))))
           (funcall closure 10)
           (funcall closure 10)
           (funcall closure 10)
           (funcall closure 10)))))